<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>微信H5获取iBeacons设备信息</title>
      <link href="/2018/06/05/%E5%BE%AE%E4%BF%A1H5%E8%8E%B7%E5%8F%96iBeacons%E8%AE%BE%E5%A4%87%E4%BF%A1%E6%81%AF/"/>
      <url>/2018/06/05/%E5%BE%AE%E4%BF%A1H5%E8%8E%B7%E5%8F%96iBeacons%E8%AE%BE%E5%A4%87%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ol><li>公众号申请开通摇一摇周边</li><li>添加设备并激活对应设备</li><li>拿到设备的一系列参数</li></ol><p>设备信息类似于：<br>请将下表的UUID、Major、Minor信息配置至iBeacon设备，其中，major、minor为10进制。</p><table><thead><tr><th>部署设备</th><th>设备ID</th><th>UUID</th><th>major值</th><th>minor值</th></tr></thead><tbody><tr><td>设备zero</td><td>3214551</td><td>FDA15795-A3E2-4FB1-DEWF-C6EB07154725</td><td>10100</td><td>44511</td></tr></tbody></table><p>1、2是前提条件，不满足API不会有任何反应<br>3 是后续会用到的参数，让PM弄好了给你，如果你自己就是PM就在公众号里找找，可以导出对应Excel</p><h2 id="获取beacon信息"><a href="#获取beacon信息" class="headerlink" title="获取beacon信息"></a>获取beacon信息</h2><p><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1443448133" target="_blank" rel="noopener">H5页面获取设备信息 JS API</a></p><p>微信提供了开启、监听、关闭三个Beacon对应的接口。<br>在开始查找之前还需要将设备添加至对应分组，否则<code>onSearchBeacons</code>不会有任何反应、不进入任何回调</p><h3 id="添加beacon至分组"><a href="#添加beacon至分组" class="headerlink" title="添加beacon至分组"></a>添加beacon至分组</h3><p>根据文档-(新增分组)[<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1459330208]" target="_blank" rel="noopener">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1459330208]</a> </p><p>然后将步骤3中的设备加到分组中，<code>onSearchBeacons</code>只能监听位于分组中的beacon设备</p><h3 id="监听beacons"><a href="#监听beacons" class="headerlink" title="监听beacons"></a>监听beacons</h3><p>监听周边beacon前需要执行<code>startSearchBeacons</code>开启查找beacon</p><p>接着在成功回调中执行<code>onSearchBeacons</code>监听周围的beacon设备</p><h4 id="没反应的原因"><a href="#没反应的原因" class="headerlink" title="没反应的原因"></a>没反应的原因</h4><p>在开发过程中遇到的没有反应的原因有以下几种</p><ol><li>设备不在分组中</li><li>公众号没有添加设备</li><li>对应beacon设备没有绑定当前页面的URL</li><li>注册微信SDK的公众号和添加设备的公众号不一致</li></ol><h2 id="关闭beacon搜索"><a href="#关闭beacon搜索" class="headerlink" title="关闭beacon搜索"></a>关闭beacon搜索</h2><p>开启<code>startSearchBeacons</code>后，微信中关闭网页并不会自动stopSearchBeacons。<br>只能手动执行<code>stopSearchBeacons</code>关闭，可添加<code>beforeunload</code> listener在页面卸载前手动关闭</p>]]></content>
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信H5 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS_7部署Nginx服务</title>
      <link href="/2018/06/03/CentOS-7%E9%83%A8%E7%BD%B2Nginx%E6%9C%8D%E5%8A%A1/"/>
      <url>/2018/06/03/CentOS-7%E9%83%A8%E7%BD%B2Nginx%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p>没完整的建过站，于是把闲置的搬瓦工用起来。</p><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p>用终端连接VPS<br><code>ssh root@ip_address -p port</code><br>换成对应的ip地址和端口，输入正确密码后就成功连接。</p><p><code>yum install nginx</code> 安装nginx失败，提示：没有可用软件包 nginx</p><p>源里没有那就直接从官网下好了</p><p><code>rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</code></p><p>再安装就成功了。</p><h2 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h2><p><code>systemctl start nginx</code></p><p>如果启动成功就可以通过直接访问IP地址看到喜闻乐见的 <strong>Welcome to nginx!</strong></p><h2 id="OpenSSL生成CSR文件申请SSL证书"><a href="#OpenSSL生成CSR文件申请SSL证书" class="headerlink" title="OpenSSL生成CSR文件申请SSL证书"></a>OpenSSL生成CSR文件申请SSL证书</h2><p>DogDaddy上注册了一个<code>.app</code>的域名，还送了一年证书，也正好用起来。</p><p><code>openssl req -new -nodes -sha256 -newkey rsa:2048 -keyout myprivate.key -out mydomain.csr</code></p><p>new: 生成一个新的CSR<br>nodes: 私钥文件不被加密<br>sha256: 摘要算法<br>keyout: 生成私钥,<br>newkey rsa:2048: 指定私钥类型和长<br>mydomain.csr: 最后生成的文件名</p><p>执行上面命令后会要求输入以下内容</p><table><thead><tr><th>内容</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>Country Name</td><td>国家代码</td><td>CN</td></tr><tr><td>State or Province Name</td><td>省份</td><td>Beijing</td></tr><tr><td>Locality Name</td><td>城市</td><td>Beijing</td></tr><tr><td>Organization Name</td><td>组织名称</td><td></td></tr><tr><td>Organization Unit Name</td><td>部门名称</td><td>IT</td></tr><tr><td>Common Name</td><td>证书申请域名</td><td>example.app</td></tr><tr><td>A challenge password</td><td>某个密码</td><td>可不填</td></tr><tr><td>Email Address</td><td>邮件</td><td>我没填</td></tr></tbody></table><p>最后在命令所在目录会生成一个<code>myprivate.key</code> 和一个 <code>mydomain.csr</code>，分别为私钥和CSR申请文件。</p><p>🐶爹添加证书的时候就把CSR文件里的内容拷进去，申请一下就等着邮件通知签发证书。</p><h2 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h2><p><a href="https://www.secureserver.net/help/article/27192?prog_id=504762" target="_blank" rel="noopener">NGINX on CentOS 7: Install a Certificate</a></p><h3 id="通过scp拷贝文件至vps"><a href="#通过scp拷贝文件至vps" class="headerlink" title="通过scp拷贝文件至vps"></a>通过scp拷贝文件至vps</h3><p>基本格式为：scp -P [端口号] [源文件路径] root@ip_address:[目标路径]</p><p><strong>-P一定要大写！</strong> 默认端口可省略 -P [端口号]</p><h3 id="乌龙"><a href="#乌龙" class="headerlink" title="乌龙"></a>乌龙</h3><p>因为我注册了个<code>.app</code>后缀的域名，证书下载下来是<code>domain.app</code>被Mac识别成APP了，要显示包内容才能看到里面两个<code>.crt</code>文件。</p><h3 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@host /]<span class="comment"># nginx -t</span></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure><p><code>/etc/nginx/nginx.conf</code>就是配置文件所在的目录</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">server</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">listen</span> <span class="number">80</span><span class="string">;</span></span><br><span class="line">            <span class="string">server_name</span> <span class="string">coolexample.com;</span></span><br><span class="line">            <span class="string">return</span> <span class="number">301</span> <span class="attr">https://$host$request_uri;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">listen</span> <span class="number">443</span> <span class="string">ssl;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">server_name</span> <span class="string">coolexample.com;</span></span><br><span class="line">        <span class="string">ssl_certificate</span>     <span class="string">/etc/nginx/ssl/coolexample.crt;</span></span><br><span class="line">        <span class="string">ssl_certificate_key</span> <span class="string">/etc/nginx/ssl/coolexample.key;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">root</span> <span class="string">/usr/share/nginx/coolexample.com/;</span></span><br><span class="line">        <span class="string">index</span> <span class="string">index.php</span>  <span class="string">index.html</span> <span class="string">index.htm;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>在配置文件中加入对应的配置~</p><p><code>root</code>是对应站点的跟目录，起初没写。导致使用https访问会404</p><p><code>sudo service nginx restart</code>重启服务后应该可以生效了，如果重启失败可以通过<code>nginx -t</code>检查配置文件是否有问题</p><p>愉悦~</p>]]></content>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> CentOS7 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Echarts动态加载GeoJSON地图</title>
      <link href="/2018/06/02/Echarts%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDGeoJSON/"/>
      <url>/2018/06/02/Echarts%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDGeoJSON/</url>
      <content type="html"><![CDATA[<h2 id="Echarts监听GEO地图缩放比例"><a href="#Echarts监听GEO地图缩放比例" class="headerlink" title="Echarts监听GEO地图缩放比例"></a>Echarts监听GEO地图缩放比例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">myChart.on(<span class="string">'georoam'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//  console.log(arguments);</span></span><br><span class="line">    <span class="comment">// 回调函数自带的res中zoom永远都是1.1</span></span><br><span class="line">    <span class="built_in">console</span>.log(myChart.getOption().geo[<span class="number">0</span>].zoom);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="按需加载GEOJSON"><a href="#按需加载GEOJSON" class="headerlink" title="按需加载GEOJSON"></a>按需加载GEOJSON</h2><p>某个需求要求的是点亮用户去过的地方，国内到城市、国外精确到州。</p><p>在Echarts官方仓库中找到<a href="https://github.com/pissang/starbucks" target="_blank" rel="noopener"><strong>starbucks</strong></a>，内含各个州的GEO数据。</p><p>直觉告诉我只要拼起来就能实现word数据中包含所有州的信息。</p><h3 id="GEOJSON"><a href="#GEOJSON" class="headerlink" title="GEOJSON"></a>GEOJSON</h3><p><a href="https://www.oschina.net/translate/geojson-spec?lang=chs&amp;page=1#" target="_blank" rel="noopener">格式规范说明</a></p><p><img src="https://i.loli.net/2018/05/30/5b0e443bb5e1e.png" alt="carbon.png"></p><p>大致就是这样一个结构、具体的键值含义规范中有说明。<code>features</code>数组中的每一个对象都描述的是<strong>一块区域</strong>。那么把<code>world.json</code>里缺失的更细颗粒度的区域也加进来就ojbk了。</p><h3 id="多余的key"><a href="#多余的key" class="headerlink" title="多余的key"></a>多余的key</h3><p>上面结构多了<code>UTF8Encoding</code> <code>encodeOffsets</code> <code>name</code> 这几个key，在格式规范中不是必须的，看了下<code>Echarts</code>处理JSON部分的源码是有用到的，用于decode JSON文件。</p><h3 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h3><p>起初直接将两个JSON对象的<code>features</code>进行合并<code>world.features.concat(china.features)</code></p><p>失败了，合出来的JSON虽然符合规范，但是并不正确，渲染出来严重畸形。</p><p><img src="https://i.loli.net/2018/05/30/5b0e47c808ca9.png" alt="什么鬼(#`O′)"></p><p>经过对比，<code>world.json</code>中的<code>coordinates</code>字段为经纬度，<code>china.json</code>中则为Encode处理后的经纬度。</p><p>Debug源码发现由<code>UTF8Encoding</code>控制是否对JSON内容进行Decode，于是给合并后的JSON数据加上<code>UTF8Encoding = true</code>，然后又失败了。</p><p>控制台抛出异常：<code>Invalid geoJson format; coordinate.charCodeAt is not a function</code></p><p>喵喵喵??  decode完就格式就不对了…<br>Debug源码找到原因，<code>UTF8Encoding</code>为true开启decode后，对整个list进行decode操作，decode操作又要用到<code>encodeOffsets</code>，<code>world.json</code>没有这个key，所以就嗝屁了。</p><p>在拼接JSON前先把JSON给decode好，不就没问题了么，试了一下果然搞定了。</p><h3 id="看个效果"><a href="#看个效果" class="headerlink" title="看个效果"></a>看个效果</h3><p><img src="https://i.loli.net/2018/06/02/5b122a8887373.gif" alt="Jun-02-2018 13-25-09.gif"></p>]]></content>
      
      
        <tags>
            
            <tag> Echarts </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
